{"version":3,"sources":["components/Soldier.js","components/Circle.js","components/Menu.js","components/App.js","serviceWorker.js","index.js"],"names":["Soldier","props","react_default","a","createElement","className","concat","live","style","top","x","left","y","transform","radius","id","Circle","state","soldiers","_this","soldNum","this","setState","_this2","i","angle","Math","PI","xPos","cos","yPos","sin","push","soldBox","map","element","components_Soldier","living","indexOf","key","width","height","Component","Menu","soldVal","step","simulate","e","preventDefault","action","minLength","min","type","value","onChange","undefined","target","parseInt","changeSoldNum","changeStepNum","onClick","App","winningIndex","indexToKill","livingSolds","document","querySelectorAll","killSoldier","console","log","length","classList","remove","add","setTimeout","allSoldiers","contains","quantity","components_Circle","components_Menu","Boolean","window","location","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAeeA,EAZC,SAACC,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,WAAAC,OAAaL,EAAMM,KAAO,QAAU,QAAUC,MAAO,CAC/DC,IAAG,GAAAH,OAAKL,EAAMS,EAAX,MACHC,KAAI,GAAAL,OAAKL,EAAMW,EAAX,MACJC,UAAS,aAAAP,OAAeL,EAAMa,OAArB,OAAAR,OAAiCL,EAAMa,OAAvC,SAETZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,YAAOH,EAAMc,GAAK,MC+B3CC,6MAlCXC,MAAQ,CACJC,SAAUC,EAAKlB,MAAMmB,QACrBN,OAAQ,yFAGJO,KAAKJ,MAAMC,WAAaG,KAAKpB,MAAMmB,SACnCC,KAAKC,SAAS,CACVJ,SAAUG,KAAKpB,MAAMmB,2CAK7B,IAFK,IAAAG,EAAAF,KACDH,EAAW,GACNM,EAAI,EAAGA,EAAIH,KAAKJ,MAAMC,SAAUM,IAAK,CAC1C,IAAIC,EAAQD,EAAIH,KAAKJ,MAAMC,SAAW,EAAIQ,KAAKC,GAC3CC,EAAOP,KAAKJ,MAAMH,OAASY,KAAKG,IAAIJ,GACpCK,EAAOT,KAAKJ,MAAMH,OAASY,KAAKK,IAAIN,GACxCP,EAASc,KAAK,CACVtB,EAAGkB,EACHhB,EAAGkB,IAGX,IAAMG,EAAUf,EAASgB,IAAI,SAAAC,GAAO,OAAIjC,EAAAC,EAAAC,cAACgC,EAAD,CAAS7B,KAAMgB,EAAKtB,MAAMoC,OAAOnB,EAASoB,QAAQH,IAAWI,IAAKrB,EAASoB,QAAQH,GAAUzB,EAAGyB,EAAQzB,EAAGE,EAAGuB,EAAQvB,EAAGE,OAAQS,EAAKN,MAAMH,OAAQC,GAAIG,EAASoB,QAAQH,OACjN,OACIjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASG,MAAO,CAC3BgC,MAAK,GAAAlC,OAAK,EAAIe,KAAKJ,MAAMH,OAApB,MACL2B,OAAM,GAAAnC,OAAK,EAAIe,KAAKJ,MAAMH,OAApB,QAELmB,UA5BIS,aC8CNC,6MAhDX1B,MAAQ,CACJ2B,QAASzB,EAAKlB,MAAMmB,QACpByB,KAAM1B,EAAKlB,MAAM4C,QAErBC,SAAW,SAACC,GACRA,EAAEC,iBACF7B,EAAKlB,MAAM6C,oFAEN,IAAAvB,EAAAF,KAEL,OACInB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,QAAM6C,OAAO,UACT/C,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,SAAO8C,UAAU,IAAIC,IAAI,IAAIC,KAAK,SAASC,MAAOhC,KAAKJ,MAAM2B,QAASU,SAAU,SAACP,GAC7E,IAAIM,EAAQ,EAERA,OADmBE,IAAnBR,EAAES,OAAOH,MACDI,SAASV,EAAES,OAAOH,OAElBN,EAAES,OAAOH,MAGrB9B,EAAKD,SAAS,CACVsB,QAASS,IAETA,EAAQ,GACR9B,EAAKtB,MAAMyD,cAAcL,MAGjCnD,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SAAOgD,KAAK,SAASC,MAAOhC,KAAKJ,MAAM4B,KAAMS,SAAU,SAACP,GACpD,IAAIM,EAAQI,SAASV,EAAES,OAAOH,OAE9B9B,EAAKD,SAAS,CACVuB,KAAMQ,IAENA,EAAQ,GACR9B,EAAKtB,MAAM0D,cAAcN,MAGjCnD,EAAAC,EAAAC,cAAA,UAAQwD,QAASvC,KAAKyB,UAAtB,YACA5C,EAAAC,EAAAC,cAAA,gCA1CDsC,aCuFJmB,oNAnFb5C,MAAQ,CACNG,QAAS,GACTyB,KAAM,EACNR,OAAQ,GACRyB,aAAc,MAoBhBhB,SAAW,WAAM,IACTD,EAAS1B,EAAKF,MAAd4B,KACFkB,EAAclB,EAAO,EACrBmB,EAAcC,SAASC,iBAAiB,sBACxB,SAAdC,IAEJ,IADAH,EAAcC,SAASC,iBAAiB,0BACJX,IAA7BS,EAAYD,IACjBK,QAAQC,IAAIN,GACZA,GAAeC,EAAYM,OAU7B,GARAN,EAAYD,GAAaQ,UAAUC,OAAO,SAC1CR,EAAYD,GAAaQ,UAAUE,IAAI,QACvCT,EAAcC,SAASC,iBAAiB,sBACxCH,GAAelB,EAAO,GAGJmB,EAAYM,OAAS,IACrCP,GAAeC,EAAYM,QACzBN,EAAYM,OAAS,EACvBI,WAAWP,EAAa,UAGxB,IADA,IAAMQ,EAAcV,SAASC,iBAAiB,eACrC1C,EAAI,EAAGA,EAAImD,EAAYL,OAAQ9C,IAClCmD,EAAYnD,GAAG+C,UAAUK,SAAS,UACpCzD,EAAKG,SAAS,CACZwC,aAActC,EAAI,IAK5B2C,MAKFT,cAAgB,SAACmB,GACf1D,EAAKG,SAAS,CACZF,QAASyD,OAGblB,cAAgB,SAACkB,GACf1D,EAAKG,SAAS,CACZuB,KAAMgC,wFA1DR,IADA,IAAIxC,EAAS,GACJb,EAAI,EAAGA,EAAIH,KAAKJ,MAAMG,QAASI,IACtCa,EAAOL,MAAK,GACdX,KAAKC,SAAS,CACZe,wDAIF,GAAIhB,KAAKJ,MAAMoB,OAAOiC,SAAWjD,KAAKJ,MAAMG,QAAS,CAEnD,IADA,IAAIiB,EAAS,GACJb,EAAI,EAAGA,EAAIH,KAAKJ,MAAMG,QAASI,IACtCa,EAAOL,MAAK,GACdX,KAAKC,SAAS,CACZe,6CAkDJ,OACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAC0E,EAAD,CAAQzC,OAAQhB,KAAKJ,MAAMoB,OAAQjB,QAASC,KAAKJ,MAAMG,UACvDlB,EAAAC,EAAAC,cAAC2E,EAAD,CAAM3D,QAASC,KAAKJ,MAAMG,QAASsC,cAAerC,KAAKqC,cAAeb,KAAMxB,KAAKJ,MAAM4B,KAAMc,cAAetC,KAAKsC,cAAeb,SAAUzB,KAAKyB,WAC/I5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,SAAIiB,KAAKJ,MAAM6C,uBA7EPpB,cCMEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpF,EAAAC,EAAAC,cAACmF,EAAD,MAAStB,SAASuB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.da7826e8.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nconst Soldier = (props) => {\r\n    return (\r\n        <div className={`soldier ${props.live ? 'alive' : 'dead'}`} style={{\r\n            top: `${props.x}px`,\r\n            left: `${props.y}px`,\r\n            transform: `translate(${props.radius}px,${props.radius}px)`,\r\n        }}>\r\n            <div className=\"soldierBox\"><span>{props.id + 1}</span></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Soldier;","import React, { Component } from 'react';\r\n\r\nimport Soldier from './Soldier';\r\n\r\n\r\n\r\nclass Circle extends Component {\r\n    state = {\r\n        soldiers: this.props.soldNum,\r\n        radius: 220,\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.state.soldiers !== this.props.soldNum)\r\n            this.setState({\r\n                soldiers: this.props.soldNum,\r\n            })\r\n    }\r\n    render() {\r\n        let soldiers = [];\r\n        for (let i = 0; i < this.state.soldiers; i++) {\r\n            let angle = i / this.state.soldiers * 2 * Math.PI;\r\n            let xPos = this.state.radius * Math.cos(angle);\r\n            let yPos = this.state.radius * Math.sin(angle);\r\n            soldiers.push({\r\n                x: xPos,\r\n                y: yPos,\r\n            });\r\n        }\r\n        const soldBox = soldiers.map(element => <Soldier live={this.props.living[soldiers.indexOf(element)]} key={soldiers.indexOf(element)} x={element.x} y={element.y} radius={this.state.radius} id={soldiers.indexOf(element)} />)\r\n        return (\r\n            <div className=\"circle\" style={{\r\n                width: `${2 * this.state.radius}px`,\r\n                height: `${2 * this.state.radius}px`,\r\n            }}>\r\n                {soldBox}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Circle;","import React, { Component } from 'react';\r\n\r\n\r\nclass Menu extends Component {\r\n    state = {\r\n        soldVal: this.props.soldNum,\r\n        step: this.props.step,\r\n    }\r\n    simulate = (e) => {\r\n        e.preventDefault();\r\n        this.props.simulate();\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"menu\">\r\n                <form action=\"submit\">\r\n                    <p>Liczba żołnierzy</p>\r\n                    <input minLength='1' min='1' type=\"number\" value={this.state.soldVal} onChange={(e) => {\r\n                        let value = 0;\r\n                        if (e.target.value !== undefined)\r\n                            value = parseInt(e.target.value);\r\n                        else {\r\n                            value = e.target.value;\r\n                        }\r\n\r\n                        this.setState({\r\n                            soldVal: value,\r\n                        });\r\n                        if (value > 0) {\r\n                            this.props.changeSoldNum(value);\r\n                        }\r\n                    }} />\r\n                    <p>Liczba kroków</p>\r\n                    <input type=\"number\" value={this.state.step} onChange={(e) => {\r\n                        let value = parseInt(e.target.value);\r\n\r\n                        this.setState({\r\n                            step: value,\r\n                        });\r\n                        if (value > 0) {\r\n                            this.props.changeStepNum(value);\r\n                        }\r\n                    }} />\r\n                    <button onClick={this.simulate}>Symuluj!</button>\r\n                    <button>Reset</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import React, { Component } from 'react';\r\n\r\nimport Circle from './Circle';\r\nimport Menu from './Menu';\r\nimport '../style/App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    soldNum: 20,\r\n    step: 2,\r\n    living: [],\r\n    winningIndex: '',\r\n  }\r\n  componentDidMount() {\r\n    let living = [];\r\n    for (let i = 0; i < this.state.soldNum; i++)\r\n      living.push(true);\r\n    this.setState({\r\n      living\r\n    });\r\n  }\r\n  componentDidUpdate() {\r\n    if (this.state.living.length !== this.state.soldNum) {\r\n      let living = [];\r\n      for (let i = 0; i < this.state.soldNum; i++)\r\n        living.push(true);\r\n      this.setState({\r\n        living\r\n      });\r\n    }\r\n  }\r\n  simulate = () => {\r\n    let { step } = this.state;\r\n    let indexToKill = step - 1;\r\n    let livingSolds = document.querySelectorAll('div.soldier.alive');\r\n    const killSoldier = () => {\r\n      livingSolds = document.querySelectorAll('div.soldier.alive');\r\n      while (livingSolds[indexToKill] === undefined) {\r\n        console.log(indexToKill);\r\n        indexToKill -= livingSolds.length;\r\n      }\r\n      livingSolds[indexToKill].classList.remove('alive');\r\n      livingSolds[indexToKill].classList.add('dead');\r\n      livingSolds = document.querySelectorAll('div.soldier.alive');\r\n      indexToKill += step - 1;\r\n\r\n\r\n      if (indexToKill > livingSolds.length - 1)\r\n        indexToKill -= livingSolds.length;\r\n      if (livingSolds.length > 1)\r\n        setTimeout(killSoldier, 300);\r\n      else {\r\n        const allSoldiers = document.querySelectorAll('div.soldier');\r\n        for (let i = 0; i < allSoldiers.length; i++)\r\n          if (allSoldiers[i].classList.contains('alive'))\r\n            this.setState({\r\n              winningIndex: i + 1,\r\n            })\r\n      }\r\n\r\n    }\r\n    killSoldier();\r\n\r\n\r\n\r\n  }\r\n  changeSoldNum = (quantity) => {\r\n    this.setState({\r\n      soldNum: quantity,\r\n    })\r\n  }\r\n  changeStepNum = (quantity) => {\r\n    this.setState({\r\n      step: quantity,\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <h1>Problem Józefa Flawiusza</h1>\r\n        <Circle living={this.state.living} soldNum={this.state.soldNum} />\r\n        <Menu soldNum={this.state.soldNum} changeSoldNum={this.changeSoldNum} step={this.state.step} changeStepNum={this.changeStepNum} simulate={this.simulate} />\r\n        <div className=\"winner\">\r\n          <p>{this.state.winningIndex}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}